// <auto-generated />
using System;
using DataAccess.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccess.Migrations.ApplicationDb
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250915070553_AddImageCategory")]
    partial class AddImageCategory
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.17")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DataAccess.Entities.Application.Brand", b =>
                {
                    b.Property<Guid>("BrandID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BrandDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BrandDescriptionEN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("BrandLogoID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BrandName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BrandNameEN")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BrandID");

                    b.HasIndex("BrandLogoID");

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("DataAccess.Entities.Application.Category", b =>
                {
                    b.Property<Guid>("CategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CategoryLogoID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CategoryNameEN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("CategoryID");

                    b.HasIndex("CategoryLogoID");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("DataAccess.Entities.Application.ChatMessage", b =>
                {
                    b.Property<Guid>("ChatMessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ConversationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("ReceiverId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SenderId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SentAt")
                        .HasColumnType("datetime2");

                    b.HasKey("ChatMessageId");

                    b.HasIndex("ConversationId");

                    b.ToTable("ChatMessages");
                });

            modelBuilder.Entity("DataAccess.Entities.Application.ContactSupport", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsProcessed")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReplyBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReplyContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ContactSupports");
                });

            modelBuilder.Entity("DataAccess.Entities.Application.ContractorApplication", b =>
                {
                    b.Property<Guid>("ContractorApplicationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("EstimatePrice")
                        .HasColumnType("float");

                    b.Property<Guid>("ServiceRequestID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ContractorApplicationID");

                    b.HasIndex("ServiceRequestID");

                    b.ToTable("ContractorApplications");
                });

            modelBuilder.Entity("DataAccess.Entities.Application.Conversation", b =>
                {
                    b.Property<Guid>("ConversationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ClosedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ContractorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastMessageAt")
                        .HasColumnType("datetime2");

                    b.HasKey("ConversationId");

                    b.ToTable("Conversations");
                });

            modelBuilder.Entity("DataAccess.Entities.Application.Image", b =>
                {
                    b.Property<Guid>("ImageID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BrandID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CategoryID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ContractorApplicationID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("MaterialID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PublicId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ServiceID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ServiceRequestID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ImageID");

                    b.HasIndex("ContractorApplicationID");

                    b.HasIndex("MaterialID");

                    b.HasIndex("ServiceID");

                    b.HasIndex("ServiceRequestID");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("DataAccess.Entities.Application.Material", b =>
                {
                    b.Property<Guid>("MaterialID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BrandID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescriptionEN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("NameEN")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Unit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UnitEN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MaterialID");

                    b.HasIndex("BrandID");

                    b.HasIndex("CategoryID");

                    b.ToTable("Materials");
                });

            modelBuilder.Entity("DataAccess.Entities.Application.Service", b =>
                {
                    b.Property<Guid>("ServiceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BuildingType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PackageOption")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("PriceEsstimate")
                        .HasColumnType("float");

                    b.Property<string>("ServiceType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ServiceID");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("DataAccess.Entities.Application.ServiceRequest", b =>
                {
                    b.Property<Guid>("ServiceRequestID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BuildingType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DesignStyle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("EstimatePrice")
                        .HasColumnType("float");

                    b.Property<int>("Floors")
                        .HasColumnType("int");

                    b.Property<bool>("IsOpen")
                        .HasColumnType("bit");

                    b.Property<double>("Length")
                        .HasColumnType("float");

                    b.Property<string>("MainStructureType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PackageOption")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServiceType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Width")
                        .HasColumnType("float");

                    b.HasKey("ServiceRequestID");

                    b.ToTable("ServiceRequests");
                });

            modelBuilder.Entity("DataAccess.Entities.Application.Brand", b =>
                {
                    b.HasOne("DataAccess.Entities.Application.Image", "LogoImage")
                        .WithMany()
                        .HasForeignKey("BrandLogoID");

                    b.Navigation("LogoImage");
                });

            modelBuilder.Entity("DataAccess.Entities.Application.Category", b =>
                {
                    b.HasOne("DataAccess.Entities.Application.Image", "LogoImage")
                        .WithMany()
                        .HasForeignKey("CategoryLogoID");

                    b.Navigation("LogoImage");
                });

            modelBuilder.Entity("DataAccess.Entities.Application.ChatMessage", b =>
                {
                    b.HasOne("DataAccess.Entities.Application.Conversation", "Conversation")
                        .WithMany("Messages")
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Conversation");
                });

            modelBuilder.Entity("DataAccess.Entities.Application.ContractorApplication", b =>
                {
                    b.HasOne("DataAccess.Entities.Application.ServiceRequest", null)
                        .WithMany("ContractorApplications")
                        .HasForeignKey("ServiceRequestID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataAccess.Entities.Application.Image", b =>
                {
                    b.HasOne("DataAccess.Entities.Application.ContractorApplication", null)
                        .WithMany("Images")
                        .HasForeignKey("ContractorApplicationID");

                    b.HasOne("DataAccess.Entities.Application.Material", null)
                        .WithMany("Images")
                        .HasForeignKey("MaterialID");

                    b.HasOne("DataAccess.Entities.Application.Service", null)
                        .WithMany("Images")
                        .HasForeignKey("ServiceID");

                    b.HasOne("DataAccess.Entities.Application.ServiceRequest", null)
                        .WithMany("Images")
                        .HasForeignKey("ServiceRequestID");
                });

            modelBuilder.Entity("DataAccess.Entities.Application.Material", b =>
                {
                    b.HasOne("DataAccess.Entities.Application.Brand", "Brand")
                        .WithMany("Materials")
                        .HasForeignKey("BrandID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Entities.Application.Category", "Category")
                        .WithMany("Materials")
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("DataAccess.Entities.Application.Brand", b =>
                {
                    b.Navigation("Materials");
                });

            modelBuilder.Entity("DataAccess.Entities.Application.Category", b =>
                {
                    b.Navigation("Materials");
                });

            modelBuilder.Entity("DataAccess.Entities.Application.ContractorApplication", b =>
                {
                    b.Navigation("Images");
                });

            modelBuilder.Entity("DataAccess.Entities.Application.Conversation", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("DataAccess.Entities.Application.Material", b =>
                {
                    b.Navigation("Images");
                });

            modelBuilder.Entity("DataAccess.Entities.Application.Service", b =>
                {
                    b.Navigation("Images");
                });

            modelBuilder.Entity("DataAccess.Entities.Application.ServiceRequest", b =>
                {
                    b.Navigation("ContractorApplications");

                    b.Navigation("Images");
                });
#pragma warning restore 612, 618
        }
    }
}
