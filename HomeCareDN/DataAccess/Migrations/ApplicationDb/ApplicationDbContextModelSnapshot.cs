// <auto-generated />
using System;
using DataAccess.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccess.Migrations.ApplicationDb
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.17")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DataAccess.Entities.Application.ContractorApplication", b =>
                {
                    b.Property<Guid>("ContractorApplicationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("EstimatePrice")
                        .HasColumnType("float");

                    b.Property<Guid>("ServiceRequestID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ContractorApplicationID");

                    b.HasIndex("ServiceRequestID");

                    b.ToTable("ContractorApplications");
                });

            modelBuilder.Entity("DataAccess.Entities.Application.Image", b =>
                {
                    b.Property<Guid>("ImageID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ContractorApplicationID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("MaterialID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PublicId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ServiceID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ServiceRequestID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ImageID");
                    b.HasIndex("MaterialID");
                    b.HasIndex("ContractorApplicationID");
                    b.HasIndex("ServiceID");
                    b.HasIndex("ServiceRequestID");
                    b.ToTable("Images");
                });

            modelBuilder.Entity("DataAccess.Entities.Application.Material", b =>
                {
                    b.Property<Guid>("MaterialID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Unit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("UnitPrice")
                        .HasColumnType("float");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MaterialID");
                    b.ToTable("Materials");
                });
            modelBuilder.Entity("DataAccess.Entities.Application.Service", b =>
                {
                    b.Property<Guid>("ServiceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BuildingType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PackageOption")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("PriceEsstimate")
                        .HasColumnType("float");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServiceType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ServiceID");
                    b.ToTable("Services");
                });

            modelBuilder.Entity("DataAccess.Entities.Application.ServiceRequest", b =>
                {
                    b.Property<Guid>("ServiceRequestID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BuildingType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DesignStyle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("EstimatePrice")
                        .HasColumnType("float");

                    b.Property<int>("Floors")
                        .HasColumnType("int");

                    b.Property<bool>("IsOpen")
                        .HasColumnType("bit");

                    b.Property<double>("Length")
                        .HasColumnType("float");

                    b.Property<string>("MainStructureType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PackageOption")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServiceType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Width")
                        .HasColumnType("float");

                    b.HasKey("ServiceRequestID");

                    b.ToTable("ServiceRequests");
                });

            modelBuilder.Entity("DataAccess.Entities.Application.ContractorApplication", b =>
                {
                    b.HasOne("DataAccess.Entities.Application.ServiceRequest", null)
                        .WithMany("ContractorApplications")
                        .HasForeignKey("ServiceRequestID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataAccess.Entities.Application.Image", b =>
                {
                    b.HasOne("DataAccess.Entities.Application.Material", null)
                        .WithMany("Images")
                        .HasForeignKey("MaterialID");
                    b.HasOne("DataAccess.Entities.Application.ContractorApplication", null)
                        .WithMany("Images")
                        .HasForeignKey("ContractorApplicationID");

                    b.HasOne("DataAccess.Entities.Application.Service", null)
                        .WithMany("Images")
                        .HasForeignKey("ServiceID");

                    b.HasOne("DataAccess.Entities.Application.ServiceRequest", null)
                        .WithMany("Images")
                        .HasForeignKey("ServiceRequestID");
                });

            modelBuilder.Entity("DataAccess.Entities.Application.Material", b => 
                {
                    b.Navigation("Images");
                });
            modelBuilder.Entity("DataAccess.Entities.Application.ContractorApplication", b =>
                {
                    b.Navigation("Images");
                });

            modelBuilder.Entity("DataAccess.Entities.Application.Service", b =>
                {
                    b.Navigation("Images");
                });

            modelBuilder.Entity("DataAccess.Entities.Application.ServiceRequest", b =>
                {
                    b.Navigation("ContractorApplications");

                    b.Navigation("Images");
                });
#pragma warning restore 612, 618
        }
    }
}
