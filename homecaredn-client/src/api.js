// api.js
import axios from 'axios';
import { authService } from './services/authService';
import { toast } from 'react-toastify';

const api = axios.create({
  baseURL: '/api',
  withCredentials: true, // cookie HttpOnly
});

// Request interceptor -> g·∫Øn accessToken
api.interceptors.request.use((config) => {
  const token = localStorage.getItem('accessToken');
  if (token) config.headers.Authorization = `Bearer ${token}`;
  return config;
});

// Response interceptor -> x·ª≠ l√Ω l·ªói
api.interceptors.response.use(
  (response) => response,
  async (error) => {
    const originalRequest = error.config;

    // üõë Network Error (server t·∫Øt / kh√¥ng k·∫øt n·ªëi ƒë∆∞·ª£c)
    if (error.message === 'Network Error' && !error.response) {
      if (!originalRequest._networkHandled) {
        originalRequest._networkHandled = true; // tr√°nh toast nhi·ªÅu l·∫ßn
        toast.error('Kh√¥ng th·ªÉ k·∫øt n·ªëi t·ªõi server, vui l√≤ng th·ª≠ l·∫°i sau!');
        console.warn('API unreachable'); // ch·ªâ log ng·∫Øn g·ªçn, kh√¥ng log URL
      }
      return Promise.reject({ ...error, handled: true });
    }

    // üõë 401 Unauthorized ‚Üí th·ª≠ refresh token
    if (error.response?.status === 401 && !originalRequest._retry) {
      originalRequest._retry = true;
      try {
        const res = await authService.refreshToken();

        if (res.data?.accessToken) {
          localStorage.setItem('accessToken', res.data.accessToken);
          originalRequest.headers.Authorization = `Bearer ${res.data.accessToken}`;
          return api(originalRequest);
        }
      } catch {
        authService.logout();
      }
    }

    return Promise.reject(error);
  }
);

export default api;
